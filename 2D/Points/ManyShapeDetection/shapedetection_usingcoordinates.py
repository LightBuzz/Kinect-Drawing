# -*- coding: utf-8 -*-
"""shapeDetection_usingCoordinates.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vSZNBh1UQxlfz13aA1JPf0_SrPlA0L8J

#Import
"""

import math
import random
import numpy as np
from numpy import asarray
import cv2
from PIL import Image, ImageDraw
import sys
from skimage.feature import hog
from sklearn import svm
from sklearn.metrics import classification_report,accuracy_score
import pickle
import sys

"""#Obtain the path using OS argv"""

data_path = "/content/Coordinates/0_2.txt"



"""#Preprocessing and obtain the data coord of many shapes from the txt file

"""

file_1 = open(data_path)
Data= file_1.readlines()
Coordinates=list()
count=0
Shapes=dict()
data_list_coordinates = []
for i in range(len(Data)):
    if "End" in Data[i]:
      Shapes[i]=Data[i-1]
for i in range(len(Data)):
    if "End" in Data[i]:
      Coordinates.append(Data[i-1])
for j in range(len(Coordinates)):
  data_list = Coordinates[j].split(" ")
  data_list_coordinates.append("Shape")
  for item in data_list:
    (x, y) = item.split(",")
    (x, y) = math.ceil(float(x)), math.ceil(float(y))
    data_list_coordinates.append((x, y))

len(Coordinates)

data_list_coordinates

"""# Construct binary image using coords"""

my_screen_width = 1920
my_screen_height = 1080
length=len(data_list_coordinates)
K="Shape"
res1=[]
res2=[]
number_of_shapes=[data_list_coordinates.index(i,1) for i in data_list_coordinates[1:] if i == K]
number_of_shapes.insert(0,1)
res1=[i for i,x in enumerate(data_list_coordinates) if x==K]
res2=[i for i in range(len(data_list_coordinates)) if data_list_coordinates[i]==K]
#number_of_shapes.insert(len(number_of_shapes),length)
# let's create a 6 x 6 matrix with all pixels in black color
img = np.zeros((my_screen_width, my_screen_height), np.uint8)
data_list_coordinates1=[i for i in data_list_coordinates if i != K]
for data in data_list_coordinates1:
    img[data[0], data[1]] = 255

cv2.imwrite("/content/Generated images/t1.png", img)

res1

"""# Mirroring"""

# load the image, create the mirrored image, and the result placeholder
img = Image.open("/content/Generated images/t1.png")
mirror = img.transpose(Image.FLIP_LEFT_RIGHT).transpose(Image.ROTATE_90)
mirror.save("/content/Generated images/t1.png")

"""# Connect points using a thick line"""

# from google.colab.patches import cv2_imshow
img = cv2.imread("/content/Generated images/t1.png")
for z in range(len(res1)):
  (pre_x, pre_y) = data_list_coordinates[res1[z]+1]
  if z != (len(res1)-1):
    for (x, y) in data_list_coordinates[res1[z]+1:res1[z+1]]:
      img = cv2.line(img, (pre_x, pre_y), (x, y), (255, 255, 255), 4)
      (pre_x, pre_y) = (x, y)
  else:
    for (x, y) in data_list_coordinates[res1[z]+1:]:
      img = cv2.line(img, (pre_x, pre_y), (x, y), (255, 255, 255), 4)
      (pre_x, pre_y) = (x, y)
# save our image as a "png" image
# cv2_imshow(img)
cv2.imwrite("/content/Generated images/t2.png", img)

